using InmobiliariasHomeCo.Entities.Pojos.Estate;
using OKYSoft.Net.WebSocket.SubProtocol;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OKYSoft.Net.WebSocket;
using RealEstateHomeCo.Entities.Validations;

namespace InmobiliariasHomeCo.Protocols
{
    public class ADDESTATE : JsonSubCommand<EstateMessage>
    {
        protected override void ExecuteJsonCommand(WebSocketSession session, EstateMessage commandInfo)
        {
            Console.WriteLine("Protocolo alcanzado");
            WebSocketServerTest server = session.AppServer as WebSocketServerTest;

            Estate estate = InmobiliariasHomeCo.App.DataAccess.DataAccessEstate.InsertEstate(
                new Estate()
                {
                    PropertyKey             = commandInfo.PropertyKey,
                    FechaCaptura            = DateTime.Parse(commandInfo.FechaCaptura),
                    IdCountry               = int.Parse(commandInfo.IdCountry),
                    IdState                 = int.Parse(commandInfo.IdState),
                    IdCity                  = int.Parse(commandInfo.IdCity),
                    IdZone                  = int.Parse(commandInfo.IdZone),
                    IdLocality              = int.Parse(commandInfo.IdLocality),
                    OperationType           = commandInfo.OperationType,
                    IdSector                = byte.Parse(commandInfo.IdSector),
                    IdProdCat               = int.Parse(commandInfo.IdProdCat),
                    IdProduct               = int.Parse(commandInfo.IdProduct),
                    Commission              = decimal.Parse(commandInfo.Commission),
                    IdSalesRep              = int.Parse(commandInfo.IdSalesRep),
                    AmountRent              = decimal.Parse(commandInfo.AmountRent),
                    AmountBuy               = decimal.Parse(commandInfo.AmountBuy),
                    Stat                    = byte.Parse(commandInfo.Stat),
                    FinalPrc                = decimal.Parse(commandInfo.FinalPrc),
                    IdSalesFinal            = int.Parse(commandInfo.IdSalesFinal),
                    Street                  = commandInfo.Street,
                    IdColony                = int.Parse(commandInfo.IdColony),
                    PostCode                = commandInfo.PostCode,
                    Number                  = commandInfo.Number,
                    InteriorNumber          = commandInfo.InteriorNumber,
                    Surface                 = commandInfo.Surface,
                    IdRegion                = byte.Parse(commandInfo.IdRegion),
                    IdGround                = byte.Parse(commandInfo.IdGround),
                    Conditions              = commandInfo.Conditions,
                    Maintenance             = bool.Parse(commandInfo.Maintenance),
                    MonthDeposit            = byte.Parse(commandInfo.MonthDeposit),
                    FiscalReceipt           = bool.Parse(commandInfo.FiscalReceipt),
                    Furnished               = bool.Parse(commandInfo.Furnished),
                    Bailor                  = bool.Parse(commandInfo.Bailor),
                    LegalPolicy             = bool.Parse(commandInfo.LegalPolicy),
                    Other                   = commandInfo.Other,
                    IsPrivate               = bool.Parse(commandInfo.IsPrivate),
                    Services                = bool.Parse(commandInfo.Services),
                    Provisional             = bool.Parse(commandInfo.Provisional),
                    CurrentPredial          = bool.Parse(commandInfo.CurrentPredial),
                    CurrentMaintenance      = bool.Parse(commandInfo.CurrentMaintenance),
                    LightService            = bool.Parse(commandInfo.LightService),
                    WaterService            = bool.Parse(commandInfo.WaterService),
                    GasService              = bool.Parse(commandInfo.GasService),
                    SewerSystem             = bool.Parse(commandInfo.SewerSystem),
                    TelService              = bool.Parse(commandInfo.TelService),
                    CableService            = bool.Parse(commandInfo.CableService),
                    Area                    = decimal.Parse(commandInfo.Area),
                    Construction            = decimal.Parse(commandInfo.Construction),
                    Antique                 = int.Parse(commandInfo.Antique),
                    Front                   = decimal.Parse(commandInfo.Front),
                    BackGround              = decimal.Parse(commandInfo.BackGround),
                    Levels                  = byte.Parse(commandInfo.Levels),
                    Garden                  = decimal.Parse(commandInfo.Garden),
                    OtherCharac             = commandInfo.OtherCharac,
                    Kitchen                 = bool.Parse(commandInfo.Kitchen),
                    KitchenStat             = byte.Parse(commandInfo.KitchenStat),
                    Housing                 = commandInfo.Housing,
                    FretsSoap               = bool.Parse(commandInfo.FretsSoap),
                    TvRoom                  = bool.Parse(commandInfo.TvRoom),
                    Study                   = bool.Parse(commandInfo.Study),
                    Bar                     = bool.Parse(commandInfo.Bar),
                    Rooms                   = bool.Parse(commandInfo.Rooms),
                    NumRooms                = byte.Parse(commandInfo.NumRooms),
                    Closet                  = bool.Parse(commandInfo.Closet),
                    NumCloset               = byte.Parse(commandInfo.NumCloset),
                    DressingRoom            = bool.Parse(commandInfo.DressingRoom),
                    NumDressingRom          = byte.Parse(commandInfo.NumDressingRom),
                    Bath                    = bool.Parse(commandInfo.Bath),
                    NumBath                 = byte.Parse(commandInfo.NumBath),
                    MiddleBath              = bool.Parse(commandInfo.MiddleBath),
                    NumMiddleBath           = byte.Parse(commandInfo.NumMiddleBath),
                    ServiceYard             = bool.Parse(commandInfo.ServiceYard),
                    MultipleSalon           = bool.Parse(commandInfo.MultipleSalon),
                    ServiceCorridor         = bool.Parse(commandInfo.ServiceCorridor),
                    NumServiceCorridor      = byte.Parse(commandInfo.NumServiceCorridor),
                    Cellar                  = bool.Parse(commandInfo.Cellar),
                    NumCellar               = byte.Parse(commandInfo.NumCellar),
                    ServiceRoom             = bool.Parse(commandInfo.ServiceRoom),
                    NumServiceRoom          = byte.Parse(commandInfo.NumServiceRoom),
                    Parking                 = bool.Parse(commandInfo.Parking),
                    NumParking              = byte.Parse(commandInfo.NumParking),
                    ParkingVisit            = bool.Parse(commandInfo.ParkingVisit),
                    NumParkingVisit         = byte.Parse(commandInfo.NumParkingVisit),
                    Smokestack              = bool.Parse(commandInfo.Smokestack),
                    Jacuzzi                 = bool.Parse(commandInfo.Jacuzzi),
                    Vat                     = bool.Parse(commandInfo.Vat),
                    Alarm                   = bool.Parse(commandInfo.Alarm),
                    ElectricFence           = bool.Parse(commandInfo.ElectricFence),
                    Policy                  = bool.Parse(commandInfo.Policy),
                    SpotsFields             = bool.Parse(commandInfo.SpotsFields),
                    IrrigationSystem        = bool.Parse(commandInfo.IrrigationSystem),
                    Garden1                 = bool.Parse(commandInfo.Garden1),
                    Terrace                 = bool.Parse(commandInfo.Terrace),
                    Spit                    = bool.Parse(commandInfo.Spit),
                    Lamps                   = bool.Parse(commandInfo.Lamps),
                    Nets                    = bool.Parse(commandInfo.Nets),
                    Blinds                  = bool.Parse(commandInfo.Blinds),
                    Curtains                = bool.Parse(commandInfo.Curtains),
                    Tank                    = bool.Parse(commandInfo.Tank),
                    CapacityTank            = decimal.Parse(commandInfo.CapacityTank),
                    WaterPressure           = bool.Parse(commandInfo.WaterPressure),
                    canchasDeportivas       = bool.Parse(commandInfo.canchasDeportivas),
                    lido                    = bool.Parse(commandInfo.lido),
                    CaracteristicasPiscina  = commandInfo.CaracteristicasPiscina,
                    AirConditioner          = bool.Parse(commandInfo.AirConditioner),
                    CommonArea              = bool.Parse(commandInfo.CommonArea),
                    HouseClub               = bool.Parse(commandInfo.HouseClub),
                    Description             = commandInfo.Description,
                    Id_Owner                = int.Parse(commandInfo.Id_Owner),
                    Id_Currency             = int.Parse(commandInfo.Id_Currency),
                    PrecioM2                = int.Parse(commandInfo.PrecioM2),
                    Entrega                 = commandInfo.Entrega,
                    AnticipoVenta           = decimal.Parse(commandInfo.AnticipoVenta),
                    TipoVendedor            = decimal.Parse(commandInfo.TipoVendedor),
                    OtroTipoVendedor        = decimal.Parse(commandInfo.OtroTipoVendedor),
                    EscrituraLiberada       = bool.Parse(commandInfo.EscrituraLiberada),
                    NumEscritura            = commandInfo.NumEscritura,
                    CreditoVigente          = bool.Parse(commandInfo.CreditoVigente),
                    DeudaCredito            = decimal.Parse(commandInfo.DeudaCredito),
                    LibreGravamen           = bool.Parse(commandInfo.LibreGravamen),
                    ServiciosAlCorriente    = bool.Parse(commandInfo.ServiciosAlCorriente),
                    VentaUltimos3anhos      = bool.Parse(commandInfo.VentaUltimos3anhos),
                    ConoceLeyAntilavado     = bool.Parse(commandInfo.ConoceLeyAntilavado),
                    OtroEstatusLegal        = commandInfo.OtroEstatusLegal
                }
           );
        }
    }
}
